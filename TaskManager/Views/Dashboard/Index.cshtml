@model TaskManager.ViewModels.DashboardViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>My Dashboard</h2>
<hr />

@*Modal for Body Contents of Notes/Emails*@
<div id="showContent" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg" style="width:1250px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Body</h4>
            </div>
            <div class="modal-body">
                <div id="modalContent">
                    
                </div>
            </div>
            <div class="modal-footer">
                <ul style="list-style-type:none"> 
                    <li></li>
                </ul>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div class="container .row.row-eq-height">
    <div class="row" style="display:flex;">
        <div class="col-sm-6" style="display:flex; width:100%;">
            <div class="panel panel-primary" style="width:100%">
                <div class="panel-heading">Task Status by Company</div>
                <div class="panel-body">
                    <table id="taskByCompany" class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="width:40%;">Company</th>
                                <th style="width:15%;">Total Tasks</th>
                                <th style="width:15%;">Completed</th>
                                <th style="width:15%;">In Progress</th>
                                <th style="width:15%;">Not Started</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var company in Model.Companies)
                            {
                                <tr>
                                    <td>
                                        @Html.ActionLink(
                                                       company.CompanyName,
                                                       "Index",
                                                       "Tasks",
                                                       new
                                                       {
                                                           id = company.CompanyId
                                                       },
                                                       null)
                                    </td>
                                    @{
                                        int totalTasks = 0;
                                        int tasksOpen = 0;
                                        int tasksDone = 0;
                                        int tasksNotStarted = 0;
                                        decimal percentComplete;

                                        foreach (var task in Model.Tasks)
                                        {
                                            if (task.CompanyId == company.CompanyId)
                                            {
                                                totalTasks++;
                                                if (task.TaskStatusId == 1)
                                                {
                                                    tasksNotStarted++;
                                                }
                                                if (task.TaskStatusId == 2)
                                                {
                                                    tasksDone++;
                                                }
                                                if (task.TaskStatusId == 2)
                                                {
                                                    tasksOpen++;
                                                }
                                            }
                                        }
                                        if (totalTasks > 0)
                                        {
                                            percentComplete = tasksDone / totalTasks;
                                        }
                                        else
                                        {
                                            percentComplete = 0;
                                        }

                                        <td>@(totalTasks != 0 ? totalTasks.ToString() : "-") </td>
                                        <td>@(tasksDone != 0 ? tasksDone.ToString() : "-" )</td>
                                        <td>@(tasksOpen != 0 ? tasksOpen.ToString() : "-")</td>
                                        <td>@(tasksNotStarted != 0 ? tasksNotStarted.ToString() : "-")</td>
                                        <td>@percentComplete.ToString("P")</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-sm-6" style="display:flex; width:100%;">
            <div class="panel panel-info" style="width:100%">
                <div class="panel-heading">Open Task Pool</div>
                <div class="panel-body">
                    <table id="workpool" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Subtask Name</th>
                                <th>Created</th>
                                <th>Parent Task</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="panel-group" style="padding-left:1em; padding-right:1em;">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#currentTasks" class="btn btn-default">My Tasks</a>
            </h4>
        </div>
        @*My Tasks*@
        <div id="currentTasks" class="panel-collapse collapse">
            <div class="panel-body">
                <table id="myTasks" class="table table-bordered table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Task</th>
                            <th>Subtask</th>
                            <th>Started</th>
                            <th>Hours Needed </th>
                            <th>Hours Worked</th>
                            <th>Complete?</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="panel-footer"></div>
        </div>
    </div>
    @*Notes*@
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#noteInbox" class="btn btn-default">Notes</a>
            </h4>
        </div>
        <div id="noteInbox" class="panel-collapse collapse">
            <div class="panel-body">
                <div class="col-sm-2">
                    <button id="archiveNotes" class="btn btn-primary btn-xs">Archive</button>
                </div>
                <div class="col-sm-10">
                    <div class="pull-right">
                        <input id="viewAllNotes" type="radio" name="viewOptsNotes" value="all" /> All
                        <input id="viewNewNotes" type="radio" name="viewOptsNotes" value="archived" checked="checked" /> New
                    </div>

                </div>
                <hr />
                <table id="myNotes" class="table table-bordered table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Archive</th>
                            <th>Date Created</th>
                            <th>From</th>
                            <th>Subject</th>
                            <th>Body</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    @*Email*@
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#emailInbox" class="btn btn-default">Emails</a>
            </h4>
        </div>
        <div id="emailInbox" class="panel-collapse collapse">
            <div class="panel-body">
                <div class="col-sm-2">
                    <a class="btn btn-primary btn-xs" href="#">Archive</a> 
                </div>
                <div class="col-sm-10">
                    <div class="pull-right">
                        <input type="radio" name="viewOptsMails" value="all" checked="checked" /> All
                        <input type="radio" name="viewOptsMails" value="archived" /> Archived
                        <input type="radio" name="viewOptsMails" value="new" /> New
                    </div>
                </div>
                <hr />
                <table id="emailTable" class="table table-striped" style="table-layout:fixed">
                    <tr>
                        <th class="col-sm-1"></th>
                        <th class="col-sm-3">From</th>
                        <th class="col-sm-4">Subject</th>
                        <th class="col-sm-2">Received</th>
                        <th class="col-sm-1"></th>
                        <th class="col-sm-1"></th>
                    </tr>
                    @foreach (var item in Model.EmailDetails)
                    {
                        <tr>
                            <td class="col-sm-1">
                                @foreach( var mail in Model.Emails)
                                {
                                    if( mail.Id == item.Id)
                                    {
                                        <input type="checkbox" @(mail.IsArchived == true ? "checked" : "")/>
                                    }
                                }
                            </td>
                            <td class="col-sm-3">@Html.DisplayFor(modelItem => item.From.EmailAddress.Name) &lt;@Html.DisplayFor(modelItem => item.From.EmailAddress.Address)&gt;</td>
                            <td class="col-sm-4">@Html.DisplayFor(modelItem => item.Subject)</td>
                            <td class="col-sm-2">@Html.DisplayFor(modelItem => item.ReceivedDateTime)</td>
                            <td class="col-sm-1"><a data-toggle="modal" data-id="@item.Body.Content" title="Add this item" class="open-ShowDetails btn btn-primary btn-xs" href="#showContent">View Body</a></td>
                            <td class="col-sm-1"><a href="/Dashboard/TaskFromExternal/?taskName=@item.From.EmailAddress.Name&taskDesc=@item.Subject&type=email&id=0" class="btn btn-primary btn-xs">Create Task</a></td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
</div>

@section scripts
{
<script>
    $(document).ready(function () {
            var memberId = @Html.Raw(Json.Encode(Model.MemberId));

            getNotes("all");

            var table = $("#workpool").DataTable({
                ajax: {
                    url: "/api/subtasklevel1/0/member",
                    dataSrc: ""
                },

                paging: false,
                ordering: true,
                info: false,
                searching: false,

                columns: [
                    {
                        data: "SubTaskName",
                        render: function (data, type, subTask) {
                            return "<a href='/subtasklevel1/view/" + subTask.SubTaskId + "'>" + data + "</a>";
                        }
                    },
                    {
                        data: "DateCreated",
                        render: function (data) {
                            return moment(data).format("DD/MM/YY");
                        }
                    },
                    {
                        data: "Tasks.TaskName"
                    },
                    {
                        data: "SubTaskId",
                        render: function (data) {
                            return "<button class='js-takeTask btn btn-primary btn-xs' data-subtask-id=" + data + ">Take</button>";
                        }
                    }
                ]
            });

            var table2 = $("#myTasks").DataTable({
                ajax: {
                    url: "/api/subtasklevel1/" + memberId + "/member",
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "Tasks.TaskName",
                        width: "30%",
                    },
                    {
                        data: "SubTaskName",
                        width: "25%",
                        render: function (data, type, subTask) {
                            return "<a href='/subtasklevel1/view/" + subTask.SubTaskId + "'>" + data + "</a>";
                        }
                    },
                    {
                        data: "DateCreated",
                        width: "20%",
                        render: function (data) {
                            return moment(data).format("DD MMM YYYY");
                        }
                    },
                    {
                        data: "Hours",
                        width: "5%",
                    },
                    {
                        data: "TimeWorked",
                        width: "10%",
                        ordering: false
                    },
                    {
                        data: "IsCompleted",
                        width: "10%",
                        render: function (data, type, full, meta) {
                            return '<input disabled readonly data-val="true" type="checkbox"' + (data ? 'checked' : '') + ' />';
                        }
                    }
                ]
            });

            function getNotes(statusFilter) {
                if ($.fn.dataTable.isDataTable('#myNotes')) { //workaround to cannot reinitialise datatable
                    var table3 = $("#myNotes").DataTable();
                    table3.destroy();
                }               
                
                var table3 = $("#myNotes").DataTable({
                    ajax: {
                        url: "/api/notes/" + memberId + "/member/" + statusFilter,
                        dataSrc: ""
                    },

                    columns: [
                        {
                            data: "IsArchived",
                            width: "5%"
                        },
                        {
                            data: "DateCreated",
                            width: "10%",
                            render: function (data) {
                                return moment(data).format("DD MMM YYYY");
                            }
                        },
                        {
                            data: "MembersMadeBy.FullName",
                            width: "25%"
                        },
                        {
                            data: "Subject",
                            width: "30%"
                        },
                        {
                            data: "Body",
                            width: "10%",
                            render: function (data, type, row) {
                                return '<a data-toggle="modal" data-id="' + data + '" title="Add this item" class="open-ShowDetails btn btn-primary btn-xs" href="#showContent"> View </a>';
                            }
                        },
                        {
                            data: "NoteId",
                            width: "10%",
                            render: function (data, type, row) {
                                return '<a href="/Dashboard/TaskFromExternal/?taskName=' + row.Subject + '&taskDesc=' + row.Body + '&type=note&id=' + row.id + '" class="js-taskFromNote btn btn-primary btn-xs" data-note-id=' + data + '> Create Task </a>';
                            }
                        }
                    ]
                });
            }
                    
            $("#viewAllNotes").click(function () {
                getNotes("all");
            });
            
            $("#viewNewNotes").click(function () { 
                getNotes("new");
            });
            
            $("#workpool").on("click", ".js-takeTask", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to take this task?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/subtasklevel1/" + button.attr("data-subtask-id")  + "/" + memberId,
                            method: "PUT",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                                toastr.success("Task successfully assigned.");
                            }
                        });
                    }
                });
            });

            $(document).on("click", ".open-ShowDetails", function () {
                var contentParam = $(this).data('id');
                $(".modal-body #modalContent").html(contentParam);
            });


            function filterEmails() {
                table = document.getElementById("emailTable");
                tr = table.getElementsByTagName("tr");

                for (i = 0; i < tr.length; i++) {
                    td = tr[i].getElementsByTagName("td")[0];
                    if (td) {
                        if (td.innerHTML.toUpperCase().indexOf(filter) > true) {
                            tr[i].style.display = "";
                        } else {
                            tr[i].style.display = "none";
                        }
                    }
                }
            }

            //$("#archiveNotes").click(function () {
            //    ajax: {
            //        url: "/api/notes/" + memberId + "/member/" + statusFilter,
            //            dataSrc: ""
            //    },
            //});
        });
</script>
}


