@model TaskManager.ViewModels.MembersFormViewModel

@{
    ViewBag.Title = "Member Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Member Form</h2>

@using (Html.BeginForm("Save", "Members",
            FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true, "Please fix the following errors.")   
    <div class="form-group">
        <label class="control-label col-sm-2" for="LastName">Last Name</label>
        <div class="col-lg-10">
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.LastName)
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="FirstName">First Name</label>
        <div class="col-lg-10">
            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.FirstName)
        </div>
    </div>    
    <div class="form-group">
        <label class="control-label col-sm-2" for="MemberGroupId">Groups</label>
        <div class="col-lg-10">
            @Html.DropDownListFor(m => m.MemberGroupId, new SelectList(Model.MemberGroups, "MemberGroupId", "MemberGroupName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.MemberGroupId)
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="MemberPositionId">Position</label>
        <div class="col-lg-10">
            @Html.DropDownListFor(m => m.MemberPositionId, new SelectList(Model.MemberPositions, "MemberPositionId", "PositionName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.MemberPositionId)
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="ApplicationUserId">Email</label>
        <div class="col-lg-10">
            @Html.DropDownListFor(m => m.ApplicationUserId, new SelectList(Model.ApplicationUsers, "Id", "Email"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ApplicationUserId)
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="Address">Address</label>
        <div class="col-lg-10">
            @Html.TextBoxFor(m => m.Address, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Address)
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-sm-2" for="Phone">Phone</label>
        <div class="col-lg-10">
            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Phone)
        </div>
    </div>

    @Html.HiddenFor(m => m.ApplicationUserId)
    @Html.HiddenFor(m => m.MemberId)
    @Html.AntiForgeryToken()

    <div class="form-group" style="display:block;"> 
        <div class="col-sm-12">
            <div class="btn-group pull-right">
                <a href='@("/Members/Index")' class="btn btn-default">Close</a>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
}

<hr />
<h3>Member's Task List</h3>
<table id="memberTasks">

</table>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        var id = @Html.Raw(Json.Encode(Model.MemberId));

        var table = $("#memberTasks").DataTable({
            ajax: {
                url: "/api/subtasklevel1/" + id + "/member",
                dataSrc: ""
            },

            columns: [
                {
                    title: "Task",
                    data: "Tasks.TaskName",
                    width: "30%",
                },
                {
                    title: "Subtask",
                    data: "SubTaskName",
                    width: "25%",
                    render: function (data, type, subTask) {
                        return "<a href='/subtasklevel1/view/" + subTask.SubTaskId + "'>" + data + "</a>";
                    }
                },
                {
                    title: "Created On",
                    data: "DateCreated",
                    width: "20%",
                    render: function (data) {
                        return moment(data).format("DD MMM YYYY");
                    }
                },
                {
                    title: "Hrs to Complete",
                    data: "Hours",
                    width: "5%",
                },
                {
                    title: "Hrs Worked",
                    data: "TimeWorked",
                    width: "10%",
                    ordering: false
                },
                {
                    title: "Complete?",
                    data: "IsCompleted",
                    width: "10%",
                    render: function (data, type, full, meta) {
                        return '<input disabled readonly data-val="true" type="checkbox"' + (data ? 'checked' : '') + ' />';
                    }
                }
            ]
        });
    })
</script>
}
