@model TaskManager.ViewModels.SubtaskLevel1ViewModel
@{
    ViewBag.Title = "SubTask Log Work";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Log Work Form</h2>
<h4>@Model.SubTaskName</h4>

<hr />

<h4>Procedure</h4>

<table id="taskSteps" class="table table-striped table-hover">
    <thead>
        <tr>
            <th> </th>
            <th>Name</th>
            <th>Procedure</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>
<br />
<hr />

@if (Model.PrevTaskDone)
{
    using (Html.BeginForm("Save", "SubtaskLevel1", FormMethod.Post, new { @class = "form-horizontal", @style="border=1;" }))
    {
        @Html.ValidationSummary(true, "Please fix the following errors.")
        <div class="form-group">
            @Html.TextBoxFor(t => t.TimeWorked, new { @class = "timer", @name = "timer", @readonly = "readonly" })
            <br />
            <br />
            <div name="sw_controls" class="sw_controls" id="sw_controls">
                <input type="button" value="Start" class="sw_start btn btn-sm btn-success" id="sw_start">
                <input type="button" value="Stop" class="sw_stop btn btn-sm btn-danger" id="sw_stop">
                <input type="button" value="Resume" class="sw_resume btn btn-sm btn-default" id="sw_resume">
            </div>
        </div>
        <div class="form-group">
            <label class="control-label" for="Notes">Notes:</label>            
            <textarea rows ="8" style="width:100%" cols="40" id="Notes" name="Notes"></textarea>
            @Html.ValidationMessageFor(s => s.Notes)                     
        </div>
        <div class="form-group">
            <div class="checkbox">
                @Html.CheckBoxFor(t => t.IsCompleted) <label class="control-label" for="Notes">Completed</label>
            </div>            
        </div>

        @Html.HiddenFor(t => t.SubTaskOrder)
        @Html.HiddenFor(t => t.TaskStatusId)
        @Html.HiddenFor(t => t.PriceId)
        @Html.HiddenFor(t => t.MemberId)
        @Html.HiddenFor(t => t.SubTaskName)
        @Html.HiddenFor(t => t.SubTaskDescription)
        @Html.HiddenFor(t => t.SubTaskId)
        @Html.HiddenFor(t => t.TaskId)
        @Html.AntiForgeryToken()

        <div class="form-group" style="display:block;"> 
            <div class="col-sm-12">
                <div class="btn-group pull-right">                    
                    <a href="/Tasks/Index/0" class="btn btn-default">Close</a>
                    <button type="submit" id="save" name="save" class="btn btn-primary">Save</button>               
                </div>
            </div>
        </div>
    }
}
else
{
    <h4 class="text-danger">You cannot edit this subtask. The previous task hasn't been completed yet.</h4>

    <div class="form-group">
        <label for="TimeWorked">Time Worked</label>
        @Html.TextBoxFor(t => t.TimeWorked, new { @class = "timer", @name = "timer", @readonly = "readonly" })
    </div>
    <div class="form-group">
        <label for="Notes">Notes</label>
        @Html.TextAreaFor(s => s.Notes, new { @class = "form-control min-width: 100%", @readonly = "readonly"})
    </div>
    <a href="/Tasks/Index/0" class="btn btn-default">Close</a>
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            var subtaskId = @Html.Raw(Json.Encode(Model.SubTaskId));
            var time = @Html.Raw(Json.Encode(Model.TimeWorked));

            var table = $("#taskSteps").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "order": [[0, "asc"]],

                ajax: {
                    url: "/api/taskprocedures/" + subtaskId,
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "TaskProcedureId",
                        render: function (data, type, taskProc) {
                            return "<a class='btn btn-primary btn-xs' href='/taskprocedures/view/" + data + "'> View </a>";
                        }
                    },
                    {
                        data: "TaskProcedureDescription"
                    },
                    {
                        data: "TaskSteps"
                    }
                ]
            });

            $('#sw_controls').on('click', '.sw_start', function () {
                $('.timer').countimer({
                    initHours: time.Hours,
                    initMinutes: time.Minutes,
                    initSeconds: time.Seconds
                });
            });

            $('#sw_controls').on('click', '.sw_stop', function () {
                $('.timer').countimer('stop');
            });

            $('#sw_controls').on('click', '.sw_resume', function () {
                $('.timer').countimer('resume');
            });

        });
    </script>
}
