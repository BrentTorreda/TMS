@model TaskManager.ViewModels.SubtaskLevel1ViewModel
@{
    ViewBag.Title = "SubTask Log Work";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Log Work Form</h2>
<h4>@Model.SubTaskName</h4>
<hr />
<div class="panel panel-default">
    <div class="panel-heading">
        <h4 class="panel-title">
            <a data-toggle="collapse" href="#taskMap" class="btn btn-default">Reference</a>
        </h4>
    </div>
    <div id="taskMap" class="panel-collapse collapse">
        <div class="panel-body">
            <table id="parentTask" class="table table-striped" style="width:100%">
                <thead>
                    <tr>
                        <th>Task Name</th>
                        <th>Description</th>
                        <th>Date Created</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <div class="row" style="padding-left:30px;">
                <table id="subtaskList" class="table table-striped" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Subtask Name</th>
                            <th>Started On</th>
                            <th>Hours</th>
                            <th>Assigned To</th>
                            <th></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>
<h5>Procedure</h5>

<table id="taskSteps" class="table table-striped table-hover">
    <thead>
        <tr>
            <th> </th>
            <th>Name</th>
            <th>Procedure</th>
            <th></th>
        </tr>
    </thead>
    <tbody></tbody>
</table>
<br />
<hr />

@if (Model.PrevTaskDone)
{
    using (Html.BeginForm("Save", "SubtaskLevel1", FormMethod.Post, new { @class = "form-horizontal", @id = "SubtaskLogWork" }))
    {
        @Html.ValidationSummary(true, "Please fix the following errors.")        
        <div class="row">
            <div class="col-sm-12">
                <div class="pull-right">
                    @Html.TextBoxFor(t => t.TimeWorked, new { @class = "well", @id = "timer", @readonly = "readonly", @style = "width:100px;" })
                </div>
            </div>
        </div>   
        if (Model.IsCompleted == false) /*TASK COMPLETED*/
        {
            <div class="row" style="display:block;">
                <div class="col-sm-12">
                    <div class="btn-group pull-right">
                        <input type="button" value="Defer" id="defer" name="defer" class="btn btn-default btn-sm">
                        <input type="button" value="Pause" class="sw_stop btn btn-sm btn-danger" id="sw_stop">
                        <input type="button" value="Resume" class="sw_resume btn btn-sm btn-success" id="sw_resume">
                    </div>
                </div>
            </div>
        }

        //~~~ Deferral details
        <div id="deferDetails" class="container" style="display:none;">
            <div class="col-sm-12">
                <label class="control-label col-sm-3" for="DeferredTo">Defer To</label>
                <div class="col-sm-8" style="margin-bottom:5px;">
                    <div class='input-group date' id='datetimepicker1'>
                        <input id="DeferredTo" name="DeferredTo" type="text" class="form-control" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
                <br />
                <label class="control-label col-sm-3" for="DeferredFor">Time to Complete</label>
                <div class="col-sm-8" style="margin-bottom:5px;">                        
                    <select id="DeferredFor" name="DeferredFor" class="form-control">  
                        @{ 
                            TimeSpan minCounter = new TimeSpan(0,0,0,0);
                            TimeSpan span1 = TimeSpan.FromMinutes(30);
                            for (int i = 0; i < 49; i++)
                            {
                                <option value="@minCounter">@minCounter</option>
                                minCounter = minCounter.Add(span1);
                            }
                            }
                    </select>
                </div>
                <br />
                <label class="control-label col-sm-3" for="MemberId">Assign To</label>
                <div class="col-sm-8" style="margin-bottom:5px;">
                    @Html.DropDownListFor(t => t.MemberId, new SelectList(Model.Members, "MemberId", "FullName"), "", new { @class = "form-control" })
                </div>
                <label class="control-label col-sm-3" for="Reason">Deferred Reason</label>
                <div class="col-sm-8" style="margin-bottom:5px;">
                    <input type="text" id="Reason" name="Reason" class="form-control">
                </div>
                <div class="form-group" style="display:block;">
                    <div class="col-sm-3"></div>
                    <div class="col-sm-8">
                        <div class="btn-group pull-right">
                            <button id="cancelDefer" type="button" class="btn btn-default">Cancel</button>
                            <button id="saveDefer" type="button" class="btn btn-primary">Defer</button>
                        </div>
                    </div>
                </div>
            </div>                
        </div>

        <div class="form-group">
            <label class="control-label" for="Notes">Notes:</label>
            <textarea rows="8" style="width:100%" cols="40" id="Notes" name="Notes"></textarea>
            @Html.ValidationMessageFor(s => s.Notes)
        </div>
        <div class="form-group">
            <div class="checkbox">
                @Html.CheckBoxFor(t => t.IsCompleted) <label class="control-label" for="Notes">Completed</label>
            </div>
        </div>

        @Html.HiddenFor(t => t.SubTaskOrder)
        @Html.HiddenFor(t => t.TaskStatusId)
        @Html.HiddenFor(t => t.PriceId)
        @Html.HiddenFor(t => t.MemberId)
        @Html.HiddenFor(t => t.SubTaskName)
        @Html.HiddenFor(t => t.SubTaskDescription)
        @Html.HiddenFor(t => t.SubTaskId)
        @Html.HiddenFor(t => t.TaskId)
        @Html.AntiForgeryToken()

        <div class="form-group" style="display:block;">
            <div class="col-sm-12">
                <div class="btn-group pull-right">
                    <a href="/Tasks/Index/0" class="btn btn-default">Close</a>
                    <button type="submit" id="save" name="save" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    }
}
else
{
    <h4 class="text-danger">You cannot edit this subtask. The previous task hasn't been completed yet.</h4>

    <div class="form-group">
        <label for="TimeWorked">Time Worked</label>
        @Html.TextBoxFor(t => t.TimeWorked, new { @class = "timer", @name = "timer", @readonly = "readonly" })
    </div>
    <div class="form-group">
        <label for="Notes">Notes</label>
        @Html.TextAreaFor(s => s.Notes, new { @class = "form-control min-width: 100%", @readonly = "readonly" })
    </div>
    <a href="/Tasks/Index/0" class="btn btn-default">Close</a>
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            var subtaskName = @Html.Raw(Json.Encode(Model.SubTaskName));
            var subtaskId = @Html.Raw(Json.Encode(Model.SubTaskId));
            var taskId = @Html.Raw(Json.Encode(Model.TaskId));
            var time = @Html.Raw(Json.Encode(Model.TimeWorked));
            var taskStatus = @Html.Raw(Json.Encode(Model.IsCompleted));

            $('#datetimepicker1').datetimepicker({
                format: "DD/MM/YYYY HH:mm:ss"
            });

            $('#datetimepicker2').datetimepicker({
                format: "LT"
            });

            var table = $("#taskSteps").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "order": [[0, "asc"]],

                ajax: {
                    url: "/api/taskprocedures/" + subtaskId,
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "TaskProcedureId",
                        render: function (data, type, taskProc) {
                            return "<a class='btn btn-primary btn-xs' href='/taskprocedures/view/" + data + "'> View </a>";
                        }
                    },
                    {
                        data: "TaskProcedureDescription"
                    },
                    {
                        data: "TaskSteps"
                    }
                ]
            });

            var table2 = $("#parentTask").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "order": false,

                ajax: {
                    url: "/api/tasks/" + taskId,
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "TaskName"
                    },
                    {
                        data: "TaskDescription"
                    },
                    {
                        data: "DateCreated"
                    }
                ]
            });

            var table3 = $("#subtaskList").DataTable({
                "paging": false,
                "ordering": false,
                "info": false,
                "searching": false,
                "order": false,

                ajax: {
                    url: "/api/subtasklevel1/" + taskId,
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "SubTaskName"
                    },
                    {
                        data: "DateCreated"
                    },
                    {
                        data: "Hours"
                    },
                    {
                        data: "Members.FullName"
                    }
                ],

                createdRow: function (row, data, index) {
                    if (data.SubTaskName == subtaskName) {
                        $('td', row).eq(0).addClass('highlight');
                    }
                }
            });

            if (taskStatus == false) {
                $('#timer').countimer({
                    initHours: time.Hours,
                    initMinutes: time.Minutes,
                    initSeconds: time.Seconds
                });
            }

            $("#saveDefer").click(function () {
                bootbox.confirm("Are you sure you want to defer this task?", function (result) {
                    var myform = document.getElementById("SubtaskLogWork");
                    var fd = new FormData(myform);
                    if (result) {
                        $.ajax({
                            url: "/api/subtaskdeferral/" + subtaskId,
                            data: fd,
                            cache: false,
                            processData: false,
                            contentType: false,
                            type: 'POST',
                            success: function () {
                                toastr.success("Task successfully deferred.")
                            },
                            error: function () {
                                toastr.error("Something went wrong.");
                            }
                        });
                    }
                });
            });

            $("#sw_stop").click(function () {
                $('#timer').countimer('stop');
            });

            $("#sw_resume").click(function () {
                $('#timer').countimer('resume');
            });

            $('#defer').on('click', function () {
                $("#deferDetails").show();
            })

            $('#cancelDefer').on('click', function () {
                $("#deferDetails").hide();
            })

            $('#saveDefer').on('click', function () {
                $("#deferDetails").hide();
            })
        });
    </script>
}
