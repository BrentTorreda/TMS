@model TaskManager.ViewModels.TasksFormViewModel

@{
    ViewBag.Title = "TaskForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="form-style-2">
    @using (Html.BeginForm("Save", "Tasks",
                FormMethod.Post, new { @class = "form-style-2" }))
    {
        @Html.ValidationSummary(true, "Please fix the following errors.")    
        <div class="form-style-2-heading">Task Form</div>
        <label for="TaskName">
            <span>Name
            <span class="required">*</span>
            </span>
            @Html.TextBoxFor(t => t.TaskName, new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.TaskName)
        </label>
        <label for="TaskDescription">
            <span>Description
                <span class="required">*</span>
            </span>
            @Html.TextAreaFor(t => t.TaskDescription, new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.TaskDescription)
        </label>
        <label for="TaskTypeId">
            <span>Type</span>
            @Html.DropDownListFor(t => t.TaskTypeId, new SelectList(Model.TaskTypes, "TaskTypeId", "TaskName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.TaskTypeId)
        </label>
        <label for="TaskCategoryId">
            <span>Category</span>
            @Html.DropDownListFor(t => t.TaskCategoryId, new SelectList(Model.TaskCategories, "TaskCategoryId", "CategoryName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.TaskCategoryId)
        </label>
        <label for="DateCreated">
            <span>Date Created</span>
            @Html.TextBoxFor(t => t.DateCreated, "{0:dd/MM/yyyy}", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.DateCreated)
        </label>
        <label for="Hours">
            <span >Hours Required</span>
            @Html.TextBoxFor(t => t.Hours, new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.Hours)
        </label>
        <label for="CompanyId">
            <span>Company</span>
            @Html.DropDownListFor(t => t.CompanyId, new SelectList(Model.Companies, "CompanyId", "CompanyName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.CompanyId)
        </label>
        <label for="PriceId">
            <span>Price</span>          
            @Html.DropDownListFor(t => t.PriceId, new SelectList(Model.Prices, "PriceId", "Amount"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.PriceId)
        </label>
        <label for="PriceId">
            <span>Assigned To</span>           
            @Html.DropDownListFor(t => t.MemberId, new SelectList(Model.Members, "MemberId", "LastName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.MemberId)
        </label>
        <label for="TaskStatusId">
            <span>Status</span>          
            @Html.DropDownListFor(t => t.TaskStatusId, new SelectList(Model.TaskStatuses, "TaskStatusId", "TaskStatusName"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(t => t.TaskStatusId)
        </label>
            @Html.HiddenFor(t => t.TaskId)
            @Html.AntiForgeryToken()            
        <button type="submit" class="btn btn-primary">Save</button>
    }
</div>
<br />
<hr />
<h3>Task Procedure</h3>
<p>
    @Html.ActionLink("New Step", "New", "TaskProcedures", new { id = Model.TaskId }, new { @class = "btn btn-primary" })
</p>

<table id="taskSteps" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Order</th>
            <th>Description</th>
            <th>Video File</th>
            <th> </th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            var table = $("#taskSteps").DataTable({

                "order": [[0, "asc"]],

                ajax: {
                    url: "/api/taskprocedures",
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "TaskProcedureId",
                        render: function (data, type, taskProc) {
                            return "<a href='/taskprocedures/edit/" + taskProc.TaskProcedureId + "'>" + taskProc.TaskProcedureOrder + "</a>";
                        }
                    },
                    {
                        data: "TaskProcedureDescription"
                    },
                    {
                        data: "TaskVideoFile"
                    },
                    {
                        data: "TaskProcedureId",
                        render: function (data) {
                            return "<button class='js-delete btn btn-primary' data-taskprocedure-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            $("#taskSteps").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this step?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/taskprocedures/" + button.attr("data-taskprocedure-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });
        });
    </script>
}

